(defpackage #:urbit/serial
  (:use #:cl #:cl-intbytes #:trivial-bit-streams #:urbit/ideal))

(in-package #:urbit/serial)

(defun jam-ideal-with-callback (ideal on-byte)
  (with-bit-output-stream (s :callback on-byte)
    (let ((cursor 0)
          (dupes (make-hash-table :test 'eq)))
      (labels
        ((zero ()
           (write-bit 0 s)
           (incf cursor))
         (one ()
           (write-bit 1 s)
           (incf cursor))
         (back (ref)
           (one) (one) (mat ref))
         (save (a)
           (setf (gethash a dupes) cursor))
         (mat (a)
           (if (= 0 a)
               (one)
               (let* ((abits (integer-length a))
                      (bbits (integer-length abits))
                      (above (1+ bbits))
                      (below (1- bbits)))
                 (write-bits (ash 1 bbits) above s)
                 (write-bits (logand abits (1- (ash 1 below))) below s)
                 (write-bits a abits s)
                 (setq cursor (+ cursor above below abits)))))
         (take (stack)
           (unless (null stack)
             (give (car stack) (cdr stack))))
         (give (a stack)
           (let ((deep (ideep a))
                 (dupe (gethash a dupes)))
             (if deep
                 (if dupe
                     (progn (back dupe) (take stack))
                     (progn (save a) (one) (zero) 
                            (give (icell-head a)
                                  (cons (icell-tail a) stack))))
                 (let ((i (iint a)))
                   (if dupe
                       (let ((isize (integer-length i))
                             (dsize (integer-length dupe)))
                         (if (< isize dsize)
                             (progn (zero) (mat i))
                             (back dupe)))
                       (progn (save a) (zero) (mat a)))
                   (take stack))))))
        (give ideal nil)))))

(defun jam-ideal (ideal)
  (let ((oct (make-array 100 :adjustable t :fill-pointer 0)))
    (flet ((callback (buf end)
             (loop for i below end
                   do (vector-push-extend (aref buf i) oct))))
      (jam-ideal-with-callback ideal #'callback)
      (octets->uint oct (fill-pointer oct)))))
